/*
Copyright The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubedb.dev.apimachinery.apis.ops.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ConfigNode is the spec for mongodb ConfigServer
message ConfigNode {
  optional int32 replicas = 1;
}

// ElasticsearchHorizontalScalingSpec contains the horizontal scaling information of an Elasticsearch cluster
message ElasticsearchHorizontalScalingSpec {
  // Number of master nodes
  optional int32 master = 1;

  // Number of data nodes
  optional int32 data = 2;

  // Number of client nodes
  optional int32 client = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=elasticsearchopsrequests,singular=elasticsearchopsrequest,shortName=esops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message ElasticsearchOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ElasticsearchOpsRequestSpec spec = 2;

  optional ElasticsearchOpsRequestStatus status = 3;
}

// ElasticsearchOpsRequestList is a list of ElasticsearchOpsRequests
message ElasticsearchOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of ElasticsearchOpsRequest CRD objects
  repeated ElasticsearchOpsRequest items = 2;
}

// ElasticsearchOpsRequestSpec is the spec for ElasticsearchOpsRequest
message ElasticsearchOpsRequestSpec {
  // Specifies the Elasticsearch reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 3;

  // HorizontalScaling specifies the horizontal scaling.
  optional ElasticsearchHorizontalScalingSpec horizontalScaling = 4;
}

// ElasticsearchOpsRequestStatus is the status for ElasticsearchOpsRequest
message ElasticsearchOpsRequestStatus {
  // Specifies the current phase of the ops request
  // +optional
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=etcdopsrequests,singular=etcdopsrequest,shortName=etcdops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message EtcdOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EtcdOpsRequestSpec spec = 2;

  optional EtcdOpsRequestStatus status = 3;
}

// EtcdOpsRequestList is a list of EtcdOpsRequests
message EtcdOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of EtcdOpsRequest CRD objects
  repeated EtcdOpsRequest items = 2;
}

// EtcdOpsRequestSpec is the spec for EtcdOpsRequest
message EtcdOpsRequestSpec {
  // Specifies the etcd reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 3;
}

// EtcdOpsRequestStatus is the status for EtcdOpsRequest
message EtcdOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=memcachedopsrequests,singular=memcachedopsrequest,shortName=mcops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MemcachedOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MemcachedOpsRequestSpec spec = 2;

  optional MemcachedOpsRequestStatus status = 3;
}

// MemcachedOpsRequestList is a list of MemcachedOpsRequests
message MemcachedOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MemcachedOpsRequest CRD objects
  repeated MemcachedOpsRequest items = 2;
}

// MemcachedOpsRequestSpec is the spec for MemcachedOpsRequest
message MemcachedOpsRequestSpec {
  // Specifies the Memcached reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 3;
}

// MemcachedOpsRequestStatus is the status for MemcachedOpsRequest
message MemcachedOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// HorizontalScaling is the spec for mongodb horizontal scaling
message MongoDBHorizontalScalingSpec {
  optional MongoDBShardNode shard = 1;

  optional ConfigNode configServer = 2;

  optional MongosNode mongos = 3;

  optional int32 replicas = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mongodbopsrequests,singular=mongodbopsrequest,shortName=mgops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MongoDBOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MongoDBOpsRequestSpec spec = 2;

  optional MongoDBOpsRequestStatus status = 3;
}

// MongoDBOpsRequestList is a list of MongoDBOpsRequests
message MongoDBOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MongoDBOpsRequest CRD objects
  repeated MongoDBOpsRequest items = 2;
}

// MongoDBOpsRequestSpec is the spec for MongoDBOpsRequest
message MongoDBOpsRequestSpec {
  // Specifies the MongoDB reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies information necessary for upgrading mongodb
  optional UpgradeSpec upgrade = 3;

  // Specifies information necessary for horizontal scaling
  optional MongoDBHorizontalScalingSpec horizontalScaling = 4;

  // Specifies information necessary for vertical scaling
  optional MongoDBVerticalScalingSpec verticalScaling = 5;
}

// MongoDBOpsRequestStatus is the status for MongoDBOpsRequest
message MongoDBOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// MongoDBShardNode is the spec for mongodb Shard
message MongoDBShardNode {
  optional int32 shards = 1;

  optional int32 replicas = 2;
}

// MongoDBVerticalScalingSpec is the spec for mongodb vertical scaling
message MongoDBVerticalScalingSpec {
  optional k8s.io.api.core.v1.ResourceRequirements standalone = 1;

  optional k8s.io.api.core.v1.ResourceRequirements mongos = 2;

  optional k8s.io.api.core.v1.ResourceRequirements configServer = 3;

  optional k8s.io.api.core.v1.ResourceRequirements shard = 4;

  optional k8s.io.api.core.v1.ResourceRequirements exporter = 5;
}

// MongosNode is the spec for mongodb Mongos
message MongosNode {
  optional int32 replicas = 1;
}

message MySQLHorizontalScalingSpec {
  // Number of nodes/members of the group
  optional int32 member = 1;

  // specifies the weight of the current member/Node
  optional int32 memberWeight = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mysqlopsrequests,singular=mysqlopsrequest,shortName=myops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message MySQLOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MySQLOpsRequestSpec spec = 2;

  optional MySQLOpsRequestStatus status = 3;
}

// MySQLOpsRequestList is a list of MySQLOpsRequests
message MySQLOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MySQLOpsRequest CRD objects
  repeated MySQLOpsRequest items = 2;
}

// MySQLOpsRequestSpec is the spec for MySQLOpsRequest
message MySQLOpsRequestSpec {
  // Specifies the database reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the current ordinal of the StatefulSet
  optional int32 statefulSetOrdinal = 2;

  // Specifies the ops request type; ScaleUp, ScaleDown, Upgrade etc.
  optional string type = 3;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 4;

  // HorizontalScaling specifies the horizontal scaling.
  optional MySQLHorizontalScalingSpec horizontalScaling = 5;

  // VerticalScaling specifies the vertical scaling.
  optional MySQLVerticalScalingSpec verticalScaling = 6;
}

// MySQLOpsRequestStatus is the status for MySQLOpsRequest
message MySQLOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message MySQLVerticalScalingSpec {
  optional k8s.io.api.core.v1.ResourceRequirements mysql = 1;

  optional k8s.io.api.core.v1.ResourceRequirements exporter = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=perconaxtradbopsrequests,singular=perconaxtradbopsrequest,shortName=pxcops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PerconaXtraDBOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PerconaXtraDBOpsRequestSpec spec = 2;

  optional PerconaXtraDBOpsRequestStatus status = 3;
}

// PerconaXtraDBOpsRequestList is a list of PerconaXtraDBOpsRequests
message PerconaXtraDBOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PerconaXtraDBOpsRequest CRD objects
  repeated PerconaXtraDBOpsRequest items = 2;
}

// PerconaXtraDBOpsRequestSpec is the spec for PerconaXtraDBOpsRequest
message PerconaXtraDBOpsRequestSpec {
  // Specifies the Elasticsearch reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 3;
}

// PerconaXtraDBOpsRequestStatus is the status for PerconaXtraDBOpsRequest
message PerconaXtraDBOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=pgbounceropsrequests,singular=pgbounceropsrequest,shortName=pbops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PgBouncerOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PgBouncerOpsRequestSpec spec = 2;

  optional PgBouncerOpsRequestStatus status = 3;
}

// PgBouncerOpsRequestList is a list of PgBouncerOpsRequests
message PgBouncerOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PgBouncerOpsRequest CRD objects
  repeated PgBouncerOpsRequest items = 2;
}

// PgBouncerOpsRequestSpec is the spec for PgBouncerOpsRequest
message PgBouncerOpsRequestSpec {
  // Specifies the Elasticsearch reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 3;
}

// PgBouncerOpsRequestStatus is the status for PgBouncerOpsRequest
message PgBouncerOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=postgresopsrequests,singular=postgresopsrequest,shortName=pgops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message PostgresOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PostgresOpsRequestSpec spec = 2;

  optional PostgresOpsRequestStatus status = 3;
}

// PostgresOpsRequestList is a list of PostgresOpsRequests
message PostgresOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PostgresOpsRequest CRD objects
  repeated PostgresOpsRequest items = 2;
}

// PostgresOpsRequestSpec is the spec for PostgresOpsRequest
message PostgresOpsRequestSpec {
  // Specifies the Elasticsearch reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 3;
}

// PostgresOpsRequestStatus is the status for PostgresOpsRequest
message PostgresOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=proxysqlopsrequests,singular=proxysqlopsrequest,shortName=proxyops,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message ProxySQLOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProxySQLOpsRequestSpec spec = 2;

  optional ProxySQLOpsRequestStatus status = 3;
}

// ProxySQLOpsRequestList is a list of ProxySQLOpsRequests
message ProxySQLOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of ProxySQLOpsRequest CRD objects
  repeated ProxySQLOpsRequest items = 2;
}

// ProxySQLOpsRequestSpec is the spec for ProxySQLOpsRequest
message ProxySQLOpsRequestSpec {
  // Specifies the Elasticsearch reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 3;
}

// ProxySQLOpsRequestStatus is the status for ProxySQLOpsRequest
message ProxySQLOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=redisopsrequests,singular=redisopsrequest,shortName=rdops,scope=Cluster,categories={datastore,kubedb,appscode}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Type",type="string",JSONPath=".spec.type"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message RedisOpsRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RedisOpsRequestSpec spec = 2;

  optional RedisOpsRequestStatus status = 3;
}

// RedisOpsRequestList is a list of RedisOpsRequests
message RedisOpsRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of RedisOpsRequest CRD objects
  repeated RedisOpsRequest items = 2;
}

// RedisOpsRequestSpec is the spec for RedisOpsRequest
message RedisOpsRequestSpec {
  // Specifies the Elasticsearch reference
  optional k8s.io.api.core.v1.LocalObjectReference databaseRef = 1;

  // Specifies the ops request type: Upgrade, HorizontalScaling, VerticalScaling etc.
  optional string type = 2;

  // Specifies the field information that needed to be upgraded
  optional UpgradeSpec upgrade = 3;
}

// RedisOpsRequestStatus is the status for RedisOpsRequest
message RedisOpsRequestStatus {
  optional string phase = 1;

  // observedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 2;

  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message UpgradeSpec {
  // Specifies the target version name from catalog
  optional string targetVersion = 1;
}

